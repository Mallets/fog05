#!/usr/bin/env python3

# Copyright (c) 2014,2019 Contributors to the Eclipse Foundation
#
# See the NOTICE file(s) distributed with this work for additional
# information regarding copyright ownership.
#
# This program and the accompanying materials are made available under the
# terms of the Eclipse Public License 2.0 which is available at
# http://www.eclipse.org/legal/epl-2.0, or the Apache License, Version 2.0
# which is available at https://www.apache.org/licenses/LICENSE-2.0.
#
# SPDX-License-Identifier: EPL-2.0 OR Apache-2.0
#
# Contributors: Luca Cominardi, University Carlos III of Madrid.

import argparse
import configparser
import importlib
import os.path
import signal
import sys

from uuid import uuid4, UUID


components = []


def shutdown(signum, frame):
    # Stop the instances
    for c in components:
        c.stop()
    print("Bye...")
    sys.exit(0)


def build(config, component):
    m = importlib.import_module(config.get(component, 'module'))
    kwargs = {
            'endpoint': config.get('defaults', 'endpoint'),
            'name': config.get(component, 'module'),
            'uuid': config.get(component, 'uuid', fallback = None)
        }
    for o in config.options(component):
        kwargs[o] = config.get(component, o)
    del kwargs['module']

    return m.component(**kwargs)


if __name__ == "__main__":
    # Create the command line parser
    parser = argparse.ArgumentParser()
    parser.add_argument('-c', '--configuration',
            type = argparse.FileType('r'),
            required = True,
            help = 'The configuration file for the fog05 resource orchestrator')
    args = parser.parse_args()

    # Parse the configuration file
    config = configparser.ConfigParser()
    config.read(args.configuration.name)

    # Add components path to sys.path
    sys.path.append(os.path.abspath(config.get('defaults', 'dir')))
    # Create the components
    cs = config.get('defaults', 'components', fallback = None)
    cs = [] if cs is None else cs.split(',')
    for c in cs:
        inst = build(config, c)
        components.append(inst)

    # Start the components
    for c in components:
        c.start()

    # Register the trap
    signal.signal(signal.SIGINT, shutdown)
    signal.pause()
